import groovy.sql.Sql

repositories {
    mavenCentral()
}
configurations { driver }

dependencies {
    driver 'mysql:mysql-connector-java:5.1.38'
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each { File file ->
    loader.addURL(file.toURL())
}

def toTable(str) {
    def s = str.find('[A-Z]')
    while (s != null) {
        str = str.replaceAll(s, "_" + s.toLowerCase())
        s = str.find('[A-Z]')
    }
    str.substring(1);
}
task ttt << {
    def ss = "AdsfTgadStweqw"
    println toTable(ss)
}

task myTest << {
    def fm = new FieldCommentor();
    fm.addComment("ROLE", '''
package com.example.bootTest.app.db.entity;

import java.util.Date;

public class TestRole {
    private Long id;

    private String roleName;

    private Integer enabled;

    private Date createTime;

    private Date updateTime;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRoleName() {
        return roleName;
    }

    public void setRoleName(String roleName) {
        this.roleName = roleName;
    }

    public Integer getEnabled() {
        return enabled;
    }

    public void setEnabled(Integer enabled) {
        this.enabled = enabled;
    }

    public Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    public Date getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(Date updateTime) {
        this.updateTime = updateTime;
    }
}
''')
}


class FieldCommentor {
    private sql

    FieldCommentor() {
        def config = new Properties();
        new File("web/src/main/resources/application.properties").withInputStream {
            is -> config.load(is);
        }
        sql = Sql.newInstance(config.getProperty('spring.datasource.url'),
                config.getProperty('spring.datasource.username'),
                config.getProperty('spring.datasource.password'),
                config.getProperty('spring.datasource.driver-class-name'))
    }

    def format(src) {
        while (src.find('_.{1}') != null) {
            def o = src.find('_.{1}');
            def n = o.substring(1, 2).toUpperCase();
            src = src.replaceAll(o, n);
        }
        src
    }

    def addComment(tableName, srcText) {
        sql.eachRow(/
          SELECT  a.COLUMN_COMMENT c, a.COLUMN_NAME n, a.IS_NULLABLE r
            FROM information_schema.COLUMNS a,information_schema.TABLES b
            WHERE a.TABLE_SCHEMA=b.TABLE_SCHEMA
            AND a.TABLE_NAME=b.TABLE_NAME
            AND a.table_name IN (${tableName});/
        ) {
            def src = srcText.find('private.*'+format(it.n))
            if (src != null) {
            srcText = srcText.replaceAll(src, /@ApiModelProperty(value = "${it.c}")
    ${src}/)
            }
        }
        println srcText
    }

}


//    def aa = '111111'
//    def s = { -> /xcv
//sdfas ${aa}
//cc
///
//    }
//    def ss = "" +
//            " ${aa} xx"
//    println s();
//
//    aa = '2222222'
//    println s();

//    def ff = new File("d://fix.txt")
//    def content = ff.text
//    ff.delete();
//    ff.withPrintWriter {
//        //it.println("999999999955999999999999".replaceAll("55", '----'))
//        it.println(content)
//        //ff.text cannot be read
//        //it.println(f.text.replaceAll('844424930136572', '11111111111111111111111'))
//    }