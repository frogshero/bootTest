import groovy.sql.Sql

repositories {
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.mybatisGenerator.each { File file ->
    loader.addURL(file.toURL())
}

task mybatisGeneratorTask << {
    def destDir = new File(buildDir, 'mybatisGenerate')
    delete destDir
    destDir.mkdirs()
    ant.properties['targetProject'] = destDir.path

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(
            overwrite: true,
            configfile: 'generatorConfig-mysql.xml',
            verbose: true
    ) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'dbDriver')
            propertyref(name: 'dbUrl')
            propertyref(name: 'dbUser')
            propertyref(name: 'dbPwd')
        }
    }
}

mybatisGeneratorTask.doFirst {
    def config = new Properties();
    new File("web/src/main/resources/application.properties").withInputStream {
        is -> config.load(is);
    }
    ant.properties['dbDriver'] = config.getProperty('spring.datasource.driver-class-name')
    ant.properties['dbUrl'] = config.getProperty('spring.datasource.url')
    ant.properties['dbUser'] = config.getProperty('spring.datasource.username')
    ant.properties['dbPwd'] = config.getProperty('spring.datasource.password')
}

task copyXml(type: Copy, dependsOn: 'mybatisGeneratorTask') {
    def root = buildDir.getAbsolutePath() + '\\mybatisGenerate\\com\\example\\bootTest\\app\\db'
    def destRes = rootDir.getAbsolutePath() + '\\app\\src\\main\\resources\\mapper'
    from root + "\\mapper"
    into destRes
}

task copyJava(type: Copy, dependsOn: 'mybatisGeneratorTask') {
    def root = buildDir.getAbsolutePath() + '\\mybatisGenerate\\com\\example\\bootTest\\app\\db'
    def destCodeDir = rootDir.getAbsolutePath() + '\\app\\src\\main\\java\\com\\example\\bootTest\\app\\db'
    from root
    into destCodeDir

    include 'entity/*.java'
    include 'dao/*.java' //可能会覆盖自定义的方法
}

def format(src) {
    while (src.find('_.{1}') != null) {
        def o = src.find('_.{1}');
        def n = o.substring(1, 2).toUpperCase();
        src = src.replaceAll(o, n);
    }
    src
}

copyJava << {
    //product XXXXRepo.java and make sure XXXXMapper extend GenericMapper
    def destCodeDir = rootDir.getAbsolutePath() + '\\app\\src\\main\\java\\com\\example\\bootTest\\app\\db'
    def dir = new File(destCodeDir + "\\entity")

    def entityName = '';
    def repoClass = { -> /package com.example.bootTest.app.db.repo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import com.example.bootTest.app.db.entity.${entityName};
import com.example.bootTest.app.db.dao.${entityName}Mapper;
import com.example.bootTest.common.mapper.GenericMapper;
import com.example.bootTest.common.mapper.GenericRepository;

@Repository
public class ${entityName}Repo extends GenericRepository<${entityName}, Long> {
  @Autowired
  private ${entityName}Mapper mapper;

  @Override
  protected GenericMapper<${entityName}, Long> getGenericMapper() {
    return mapper;
  }
}
/ }

    def fc = new FieldCommentor();
    dir.eachFile {
        //增加类
        entityName = it.getName().split('\\.')[0]
        def f = new File(destCodeDir + "\\repo\\" + entityName + "Repo.java")
        f.withPrintWriter {
            it.println(repoClass());
        }

        //增加extends GenericMapper
        def mapperFile = new File(destCodeDir + "\\dao\\" + entityName + "Mapper.java")
        def o = "public interface ${entityName}Mapper \\{"
        def n = /import com.example.bootTest.common.mapper.GenericMapper;

public interface ${entityName}Mapper extends GenericMapper<${entityName}, Long> {/
        def content = mapperFile.text.replaceAll(o, n);
        mapperFile.delete()
        mapperFile.withPrintWriter {
            it.println(content)
        }

        //增加@ApiModelProperty
        fc.addComment(destCodeDir + "\\entity\\" + entityName + ".java")
    }

}
//dependsOn: ['copyXml', 'copyJava']
task mymy(dependsOn: ['copyXml', 'copyJava']) {
    doLast {
        println '---------------OK---------------'
    }
}

class FieldCommentor {
    private sql

    FieldCommentor() {
        def config = new Properties();
        new File("web/src/main/resources/application.properties").withInputStream {
            is -> config.load(is);
        }
        sql = Sql.newInstance(config.getProperty('spring.datasource.url'),
                config.getProperty('spring.datasource.username'),
                config.getProperty('spring.datasource.password'),
                config.getProperty('spring.datasource.driver-class-name'))
    }

    def format(src) {
        while (src.find('_.{1}') != null) {
            def o = src.find('_.{1}');
            def n = o.substring(1, 2).toUpperCase();
            src = src.replaceAll(o, n);
        }
        src
    }

    def toTable(str) {
        def s = str.find('[A-Z]')
        while (s != null) {
            str = str.replaceAll(s, "_" + s.toLowerCase())
            s = str.find('[A-Z]')
        }
        str.substring(1);
    }

    def addComment(fileName) {
        def entityFile = new File(fileName)
        def srcText = entityFile.text
        def entityName = entityFile.getName().split('\\.')[0]
        def tableName = toTable(entityName)
        srcText = srcText.replaceAll("public class ${entityName} \\{", /import io.swagger.annotations.ApiModelProperty;

public class  ${entityName} {/)

        sql.eachRow(/
          SELECT  a.COLUMN_COMMENT c, a.COLUMN_NAME n, a.IS_NULLABLE r
            FROM information_schema.COLUMNS a,information_schema.TABLES b
            WHERE a.TABLE_SCHEMA=b.TABLE_SCHEMA
            AND a.TABLE_NAME=b.TABLE_NAME
            AND a.table_name IN (${tableName})/
        ) {
            def src = srcText.find('private.*'+format(it.n))
            if (src != null) {
                def required = it.r.equals("NO") ? ", required = true" : ""
                srcText = srcText.replaceAll(src, /@ApiModelProperty(value = "${it.c}"${required})
    ${src}/)
            }
        }

        entityFile.withPrintWriter("UTF-8") {
            it.println(srcText)
        }
    }

}