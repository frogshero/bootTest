repositories {
    mavenCentral()
}

configurations { mybatisGenerator }

dependencies {
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
}

task mybatisGeneratorTask << {
    def destDir = new File(buildDir, 'mybatisGenerate')
    delete destDir
    destDir.mkdirs()
    ant.properties['targetProject'] = destDir.path

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(
            overwrite: true,
            configfile: 'generatorConfig-mysql.xml',
            verbose: true
    ) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'dbDriver')
            propertyref(name: 'dbUrl')
            propertyref(name: 'dbUser')
            propertyref(name: 'dbPwd')
        }
    }
}

mybatisGeneratorTask.doFirst {
    def config = new Properties();
    new File("web/src/main/resources/application.properties").withInputStream {
        is -> config.load(is);
    }
    ant.properties['dbDriver'] = config.getProperty('spring.datasource.driver-class-name')
    ant.properties['dbUrl'] = config.getProperty('spring.datasource.url')
    ant.properties['dbUser'] = config.getProperty('spring.datasource.username')
    ant.properties['dbPwd'] = config.getProperty('spring.datasource.password')
}

task copyXml(type: Copy, dependsOn: 'mybatisGeneratorTask') {
    def root = buildDir.getAbsolutePath() + '\\mybatisGenerate\\com\\example\\bootTest\\app.\\db'
    def destRes = rootDir.getAbsolutePath() + '\\app\\src\\main\\resources\\mapper'
    from root + "\\mapper"
    into destRes
}

task copyJava(type: Copy, dependsOn: 'mybatisGeneratorTask') {
    def root = buildDir.getAbsolutePath() + '\\mybatisGenerate\\com\\example\\bootTest\\app\\db'
    def destCodeDir = rootDir.getAbsolutePath() + '\\app\\src\\main\\java\\com\\example\\bootTest\\app\\db'
    from root
    into destCodeDir

    include 'entity/*.java'
    include 'dao/*.java'
}

task mymy(dependsOn: ['copyXml', 'copyJava']) {
    doLast {
        println '---------------OK---------------'
    }
}